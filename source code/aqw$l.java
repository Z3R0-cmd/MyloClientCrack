/*     */ import java.util.List;
/*     */ import java.util.Random;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class l
/*     */   extends aqw.o
/*     */ {
/*     */   private int a;
/*     */   
/*     */   public l() {}
/*     */   
/*     */   public l(aqw.k ☃, int i, Random random, aqe aqe1, cq cq1) {
/* 531 */     super(☃, i);
/*     */     
/* 533 */     this.m = cq1;
/* 534 */     this.l = aqe1;
/* 535 */     this.a = Math.max(aqe1.c(), aqe1.e());
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(dn ☃) {
/* 540 */     super.a(☃);
/* 541 */     ☃.a("Length", this.a);
/*     */   }
/*     */ 
/*     */   
/*     */   protected void b(dn ☃) {
/* 546 */     super.b(☃);
/* 547 */     this.a = ☃.f("Length");
/*     */   }
/*     */ 
/*     */   
/*     */   public void a(aqt ☃, List<aqt> list, Random random) {
/* 552 */     boolean bool = false;
/*     */ 
/*     */     
/* 555 */     int i = random.nextInt(5);
/* 556 */     while (i < this.a - 8) {
/* 557 */       aqt aqt1 = a((aqw.k)☃, list, random, 0, i);
/* 558 */       if (aqt1 != null) {
/* 559 */         i += Math.max(aqt1.l.c(), aqt1.l.e());
/* 560 */         bool = true;
/*     */       } 
/* 562 */       i += 2 + random.nextInt(5);
/*     */     } 
/*     */ 
/*     */     
/* 566 */     i = random.nextInt(5);
/* 567 */     while (i < this.a - 8) {
/* 568 */       aqt aqt1 = b((aqw.k)☃, list, random, 0, i);
/* 569 */       if (aqt1 != null) {
/* 570 */         i += Math.max(aqt1.l.c(), aqt1.l.e());
/* 571 */         bool = true;
/*     */       } 
/* 573 */       i += 2 + random.nextInt(5);
/*     */     } 
/*     */     
/* 576 */     if (bool && random.nextInt(3) > 0 && this.m != null) {
/* 577 */       switch (aqw.null.a[this.m.ordinal()]) {
/*     */         case 1:
/* 579 */           aqw.b((aqw.k)☃, list, random, this.l.a - 1, this.l.b, this.l.c, cq.e, d());
/*     */           break;
/*     */         case 2:
/* 582 */           aqw.b((aqw.k)☃, list, random, this.l.a - 1, this.l.b, this.l.f - 2, cq.e, d());
/*     */           break;
/*     */         case 4:
/* 585 */           aqw.b((aqw.k)☃, list, random, this.l.d - 2, this.l.b, this.l.c - 1, cq.c, d());
/*     */           break;
/*     */         case 3:
/* 588 */           aqw.b((aqw.k)☃, list, random, this.l.a, this.l.b, this.l.c - 1, cq.c, d());
/*     */           break;
/*     */       } 
/*     */     }
/* 592 */     if (bool && random.nextInt(3) > 0 && this.m != null) {
/* 593 */       switch (aqw.null.a[this.m.ordinal()]) {
/*     */         case 1:
/* 595 */           aqw.b((aqw.k)☃, list, random, this.l.d + 1, this.l.b, this.l.c, cq.f, d());
/*     */           break;
/*     */         case 2:
/* 598 */           aqw.b((aqw.k)☃, list, random, this.l.d + 1, this.l.b, this.l.f - 2, cq.f, d());
/*     */           break;
/*     */         case 4:
/* 601 */           aqw.b((aqw.k)☃, list, random, this.l.d - 2, this.l.b, this.l.f + 1, cq.d, d());
/*     */           break;
/*     */         case 3:
/* 604 */           aqw.b((aqw.k)☃, list, random, this.l.a, this.l.b, this.l.f + 1, cq.d, d());
/*     */           break;
/*     */       } 
/*     */     }
/*     */   }
/*     */   
/*     */   public static aqe a(aqw.k ☃, List<aqt> list, Random random, int i, int j, int m, cq cq1) {
/* 611 */     int n = 7 * ns.a(random, 3, 5);
/*     */     
/* 613 */     while (n >= 7) {
/* 614 */       aqe aqe = aqe.a(i, j, m, 0, 0, 0, 3, 3, n, cq1);
/*     */       
/* 616 */       if (aqt.a(list, aqe) == null) {
/* 617 */         return aqe;
/*     */       }
/* 619 */       n -= 7;
/*     */     } 
/*     */     
/* 622 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean a(adm ☃, Random random, aqe aqe1) {
/* 627 */     alz alz1 = a(afi.n.Q());
/* 628 */     alz alz2 = a(afi.e.Q());
/* 629 */     for (int i = this.l.a; i <= this.l.d; i++) {
/* 630 */       for (int j = this.l.c; j <= this.l.f; j++) {
/* 631 */         cj cj = new cj(i, 64, j);
/* 632 */         if (aqe1.b(cj)) {
/* 633 */           cj = ☃.r(cj).b();
/* 634 */           ☃.a(cj, alz1, 2);
/* 635 */           ☃.a(cj.b(), alz2, 2);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 640 */     return true;
/*     */   }
/*     */ }


/* Location:              /Users/michaelmc/Downloads/MyloClientCrack-main/MyloClient/MyloClient.jar!/aqw$l.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       1.1.3
 */